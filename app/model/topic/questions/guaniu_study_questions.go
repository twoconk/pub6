// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package questions

// Fill with you ideas below.
import (
	"github.com/gogf/gf/errors/gerror"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
)

// AddReq 用于存储新增请求的请求参数
type AddReq struct {
	TopicId            int64       `p:"topicId" `
	TaskId             int64       `p:"taskId" `
	UserId          int64       `p:"userId" `
	QuestionType       int         `p:"questionType" `
	QuestionTitle      string      `p:"questionTitle" `
	OptionA            string      `p:"optionA" `
	OptionB            string      `p:"optionB" `
	OptionC            string      `p:"optionC" `
	OptionD            string      `p:"optionD" `
	OptionE            string      `p:"optionE" `
	Answer1            string      `p:"answer1" `
	Answer2            string      `p:"answer2" `
	Answer3            string      `p:"answer3" `
	QuestionAnswerDesc string      `p:"questionAnswerDesc" `
	QuestionDiff       int         `p:"questionDiff" `
	CreateOwnerId      int64         `p:"createOwnerId" `
	CreateTime         *gtime.Time `p:"createTime" `
	ModifyTime         *gtime.Time `p:"modifyTime" `
	TopicTableIndex    int         `p:"topicTableIndex" `
}

// EditReq 用于存储修改请求参数
type EditReq struct {
	Id                 int64       `p:"id" v:"required#主键ID不能为空"`
	TopicId            int64       `p:"topicId" `
	TaskId             int64       `p:"taskId" `
	UserId          int64       `p:"userId" `
	QuestionType       int         `p:"questionType" `
	QuestionTitle      string      `p:"questionTitle" `
	OptionA            string      `p:"optionA" `
	OptionB            string      `p:"optionB" `
	OptionC            string      `p:"optionC" `
	OptionD            string      `p:"optionD" `
	OptionE            string      `p:"optionE" `
	Answer1            string      `p:"answer1" `
	Answer2            string      `p:"answer2" `
	Answer3            string      `p:"answer3" `
	QuestionAnswerDesc string      `p:"questionAnswerDesc" `
	QuestionDiff       int         `p:"questionDiff" `
	CreateOwnerId      int64         `p:"createOwnerId" `
	ModifyTime         *gtime.Time `p:"modifyTime" `
	TopicTableIndex    int         `p:"topicTableIndex" `
}
type RemoveReq struct {
	Ids []int `p:"ids"` //删除id
}

// SelectPageReq 用于存储分页查询的请求参数
type SelectPageReq struct {
	TopicId            int64       `p:"topicId"`            //主题id
	TaskId             int64       `p:"taskId"`             //任务id
	QuestionType       int         `p:"questionType"`       //选择题0, 1:对错题  2:填空题
	QuestionTitle      string      `p:"questionTitle"`      //问题
	UserId          int64       `p:"userId" `
	OptionA            string      `p:"optionA"`            //描述A
	OptionB            string      `p:"optionB"`            //描述B
	OptionC            string      `p:"optionC"`            //描述C
	OptionD            string      `p:"optionD"`            //描述D
	OptionE            string      `p:"optionE"`            //描述E
	Answer1            string      `p:"answer1"`            //选择题答案
	Answer2            string      `p:"answer2"`            //描述题答案
	Answer3            string      `p:"answer3"`            //对错题答案
	QuestionAnswerDesc string      `p:"questionAnswerDesc"` //问题描述
	QuestionDiff       int         `p:"questionDiff"`       //题目难度 1，越大越难
	CreateOwnerId      int64         `p:"createOwnerId"`      //创建者
	ModifyTime         *gtime.Time `p:"modifyTime"`         //时间
	TopicTableIndex    int         `p:"topicTableIndex"`    //表id 与表topic 相关
	BeginTime          string      `p:"beginTime"`          //开始时间
	EndTime            string      `p:"endTime"`            //结束时间
	PageNum            int64       `p:"pageNum"`            //当前页码
	PageSize           int         `p:"pageSize"`           //每页数
}

// GetPlugAdByID 根据ID查询记录
func GetByID(id int64) (*Entity, error) {
	entity, err := Model.FindOne(id)
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("根据ID查询记录出错")
	}
	if entity == nil {
		err = gerror.New("根据ID未能查询到记录")
	}
	return entity, nil
}

// AddSave 添加
func AddSave(req *AddReq) error {
	entity := new(Entity)
	//entity.Id = req.Id
	entity.TopicId = req.TopicId
	entity.TaskId = req.TaskId
	entity.QuestionType = req.QuestionType
	entity.QuestionTitle = req.QuestionTitle
	entity.OptionA = req.OptionA
	entity.OptionB = req.OptionB
	entity.OptionC = req.OptionC
	entity.OptionD = req.OptionD
	entity.OptionE = req.OptionE
	entity.Answer1 = req.Answer1
	entity.Answer2 = req.Answer2
	entity.Answer3 = req.Answer3
	entity.QuestionAnswerDesc = req.QuestionAnswerDesc
	entity.QuestionDiff = req.QuestionDiff
	entity.CreateOwnerId = req.CreateOwnerId
	entity.ModifyTime = req.ModifyTime
	entity.CreateTime = req.CreateTime
	entity.TopicTableIndex = req.TopicTableIndex
	result, err := Model.Save(entity)
	if err != nil {
		return err
	}
	_, err = result.LastInsertId()
	if err != nil {
		return err
	}
	return nil
}

// 删除
func DeleteByIds(Ids []int) error {
	_, err := Model.Delete("id in(?)", Ids)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("删除失败")
	}
	return nil
}

// 根据ID来修改信息
func EditSave(req *EditReq) error {
	// 先根据ID来查询要修改的记录
	entity, err := GetByID(req.Id)
	if err != nil {
		return err
	}
	// 修改实体
	entity.TopicId = req.TopicId
	entity.TaskId = req.TaskId
	entity.QuestionType = req.QuestionType
	entity.QuestionTitle = req.QuestionTitle
	entity.OptionA = req.OptionA
	entity.OptionB = req.OptionB
	entity.OptionC = req.OptionC
	entity.OptionD = req.OptionD
	entity.OptionE = req.OptionE
	entity.Answer1 = req.Answer1
	entity.Answer2 = req.Answer2
	entity.Answer3 = req.Answer3
	entity.QuestionAnswerDesc = req.QuestionAnswerDesc
	entity.QuestionDiff = req.QuestionDiff
	entity.CreateOwnerId = req.CreateOwnerId
	entity.ModifyTime = req.ModifyTime
	entity.TopicTableIndex = req.TopicTableIndex
	_, err = Model.Save(entity)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("修改失败")
	}
	return nil
}

// 分页查询,返回值total总记录数,page当前页
func SelectListByPage(req *SelectPageReq) (total int, page int64, list []*Entity, err error) {
	model := Model
	if req != nil {
		if req.QuestionTitle != "" {
			model = model.Where("question_title = ?", req.QuestionTitle)
		}
		if req.TopicId != 0 {
			model = model.Where("topic_id = ?", req.TopicId)
		}
		if req.TaskId != 0 {
			model = model.Where("task_id = ?", req.TaskId)
		}
	}
	// 查询总记录数(总行数)
	total, err = model.Count()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("获取总记录数失败")
		return
	}
	if req.PageNum == 0 {
		req.PageNum = 1
	}
	page = req.PageNum
	if req.PageSize == 0 {
		req.PageSize = 10
	}
	// 分页排序查询
	list, err = model.Page(int(page), int(req.PageSize)).Order("id desc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("分页查询失败")
		return
	}
	return
}

// 获取所有数据
func SelectListAll(req *SelectPageReq) (list []*Entity, err error) {
	model := Model
	if req != nil {
		if req.QuestionTitle != "" {
			model.Where("question_title = ?", req.QuestionTitle)
		}
		if req.OptionA != "" {
			model.Where("option_a = ?", req.OptionA)
		}
		if req.OptionB != "" {
			model.Where("option_b = ?", req.OptionB)
		}
		if req.OptionC != "" {
			model.Where("option_c = ?", req.OptionC)
		}
		if req.OptionD != "" {
			model.Where("option_d = ?", req.OptionD)
		}
		if req.OptionE != "" {
			model.Where("option_e = ?", req.OptionE)
		}
		if req.Answer1 != "" {
			model.Where("answer1 = ?", req.Answer1)
		}
		if req.Answer2 != "" {
			model.Where("answer2 = ?", req.Answer2)
		}
		if req.Answer3 != "" {
			model.Where("answer3 = ?", req.Answer3)
		}
		if req.QuestionAnswerDesc != "" {
			model.Where("question_answer_desc = ?", req.QuestionAnswerDesc)
		}
	}
	// 查询
	list, err = model.Order("id desc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("查询失败")
		return
	}
	return
}
