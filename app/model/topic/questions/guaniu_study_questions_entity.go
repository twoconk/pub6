// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package questions

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table guaniu_study_questions.
type Entity struct {
	Id                 int64       `orm:"id,primary"           json:"id"`                   // 编号
	TopicId            int64       `orm:"topic_id"             json:"topic_id"`             // 主题id
	TaskId             int64       `orm:"task_id"              json:"task_id"`              // 任务id
	QuestionType       int         `orm:"question_type"        json:"question_type"`        // 选择题0, 1:对错题  2:填空题
	QuestionTitle      string      `orm:"question_title"       json:"question_title"`       // 问题
	OptionA            string      `orm:"option_a"             json:"option_a"`             // 描述A
	OptionB            string      `orm:"option_b"             json:"option_b"`             // 描述B
	OptionC            string      `orm:"option_c"             json:"option_c"`             // 描述C
	OptionD            string      `orm:"option_d"             json:"option_d"`             // 描述D
	OptionE            string      `orm:"option_e"             json:"option_e"`             // 描述E
	Answer1            string      `orm:"answer1"              json:"answer_1"`             // 选择题答案
	Answer2            string      `orm:"answer2"              json:"answer_2"`             // 描述题答案
	Answer3            string      `orm:"answer3"              json:"answer_3"`             // 对错题答案
	QuestionAnswerDesc string      `orm:"question_answer_desc" json:"question_answer_desc"` // 问题描述
	QuestionDiff       int         `orm:"question_diff"        json:"question_diff"`        // 题目难度 1，越大越难
	CreateOwnerId      int64         `orm:"create_owner_id"      json:"create_owner_id"`      // 创建者
	CreateTime         *gtime.Time `orm:"create_time"          json:"create_time"`          // 时间
	ModifyTime         *gtime.Time `orm:"modify_time"          json:"modify_time"`          // 时间
	TopicTableIndex    int         `orm:"topic_table_index"    json:"topic_table_index"`    // 表id 与表topic 相关
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}
