// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package topics

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table guaniu_study_topic.
type Entity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号
	ParentId        int64       `orm:"parent_id"         json:"parent_id"`         // 父主题id
	TopicType       int         `orm:"topic_type"        json:"topic_type"`        // 主题类型
	TopicOwnerType       int         `orm:"topic_owner_type"        json:"topic_owner_type"`        // 主题类型
	TopicName       string      `orm:"topic_name"        json:"topic_name"`        // 主题名称
	TopicPinyin     string      `orm:"topic_pinyin"      json:"topic_pinyin"`      // 主题名称拼音
	TopicImg        string      `orm:"topic_img"         json:"topic_img"`         // 主题图片路径
	TopicContent    string      `orm:"topic_content"     json:"topic_content"`     // 主题描述
	SeeNum          int         `orm:"see_num"         json:"see_num"`         // 围观人数
	OrderNum        int         `orm:"order_num"         json:"order_num"`         // 显示顺序
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态 0免费开放 1 收费开放  2 自己可见 3 已经结束 4 已经删除 
	CreateOwnerId   int64      `orm:"create_owner_id"   json:"create_owner_id"`   // 创建者
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	ModifyTime      *gtime.Time `orm:"modify_time"       json:"modify_time"`       // 时间
	MembersNumber   int         `orm:"members_number"    json:"members_number"`    // 加入成员数
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关 
}
//alter table guaniu_study_topic add see_num int(11);
type ShowEntity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号
	ParentId        int64       `orm:"parent_id"         json:"parent_id"`         // 父主题id
	TopicType       int         `orm:"topic_type"        json:"topic_type"`        // 主题类型
	TopicOwnerType       int         `orm:"topic_owner_type"        json:"topic_owner_type"`        // 主题类型
	TopicName       string      `orm:"topic_name"        json:"topic_name"`        // 主题名称
	TopicPinyin     string      `orm:"topic_pinyin"      json:"topic_pinyin"`      // 主题名称拼音
	TopicImg        string      `orm:"topic_img"         json:"topic_img"`         // 主题图片路径
	TopicContent    string      `orm:"topic_content"     json:"topic_content"`     // 主题描述
	OrderNum        int         `orm:"order_num"         json:"order_num"`         // 显示顺序
	SeeNum          int         `orm:"see_num"         json:"see_num"`         // 围观人数
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态（0正常 1 关闭）
	CreateOwnerId   int64      `orm:"create_owner_id"   json:"create_owner_id"`   // 创建者
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	ModifyTime      *gtime.Time `orm:"modify_time"       json:"modify_time"`       // 时间
	MembersNumber   int         `orm:"members_number"    json:"members_number"`    // 加入成员数
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关
	Name   string      `orm:"name"       json:"name"`   // 用户名
	Ext    string      `orm:"ext"        json:"ext"`    // 扩展字段
}
// Entity is the golang structure for table guaniu_study_topic.
type SaveEntity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号
	ParentId        int64       `orm:"parent_id"         json:"parent_id"`         // 父主题id
	TopicType       int         `orm:"topic_type"        json:"topic_type"`        // 主题类型
	TopicOwnerType       int         `orm:"topic_owner_type"        json:"topic_owner_type"`        // 主题类型
	TopicName       string      `orm:"topic_name"        json:"topic_name"`        // 主题名称
	TopicPinyin     string      `orm:"topic_pinyin"      json:"topic_pinyin"`      // 主题名称拼音
	TopicImg        string      `orm:"topic_img"         json:"topic_img"`         // 主题图片路径
	TopicContent    string      `orm:"topic_content"     json:"topic_content"`     // 主题描述
	OrderNum        int         `orm:"order_num"         json:"order_num"`         // 显示顺序
	SeeNum          int         `orm:"see_num"         json:"see_num"`         // 围观人数
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态（0正常 1 关闭）
	CreateOwnerId   int64      `orm:"create_owner_id"   json:"create_owner_id"`   // 创建者
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	ModifyTime      *gtime.Time `orm:"modify_time"       json:"modify_time"`       // 时间
	MembersNumber   int         `orm:"members_number"    json:"members_number"`    // 加入成员数
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关 
}
// Entity is the golang structure for table guaniu_study_topic.
type CommentEntity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号 
	TopicId       int64         `orm:"topic_id"        json:"topic_id"`        // 主题id
	UserId       int64         `orm:"user_id"        json:"user_id"`        // 主题类型
	Content    string      `orm:"content"     json:"content"`     // 主题描述
	OrderSeq        int         `orm:"orderSeq"         json:"orderSeq"`         // 显示顺序
	LikeNum        int         `orm:"likeNum"         json:"likeNum"`         // 显示顺序
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态（0正常 1 关闭）
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}
