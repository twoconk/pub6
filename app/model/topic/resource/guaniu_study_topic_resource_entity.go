// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package resource

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table guaniu_study_topic_resource.
type Entity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号
	TopicId         int64       `orm:"topic_id"          json:"topic_id"`          // 主题id            
    UserId          int64       `orm:"user_id"           json:"user_id"`           // 成员id            
	ResourceTypeId  int         `orm:"resource_type_id"  json:"resource_type_id"`  // 关联资源类型，资源类型1.公开网课/2.付费网课/3.专业书籍/4.文档材料/5.其他类型
	BookId          int         `orm:"book_id"           json:"book_id"`           // 书的id
	ResourceContent string      `orm:"resource_content"  json:"resource_content"`  // 资源内容，可以是资源链接
	ResourceLink string         `orm:"resource_link"  json:"resource_link"`  // 资源内容，可以是资源链接
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态（0正常 1 禁言）
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关
}
type ShowEntity struct {
	Id              int64       `orm:"id,primary"        json:"id"`                // 编号
	TopicId         int64       `orm:"topic_id"          json:"topic_id"`          // 主题id            
    UserId          int64       `orm:"user_id"           json:"user_id"`           // 成员id            
	ResourceTypeId  int         `orm:"resource_type_id"  json:"resource_type_id"`  // 关联资源类型，资源类型1.公开网课/2.付费网课/3.专业书籍/4.文档材料/5.其他类型
	BookId          int         `orm:"book_id"           json:"book_id"`           // 书的id
	ResourceContent string      `orm:"resource_content"  json:"resource_content"`  // 资源内容，可以是资源链接
	ResourceLink string         `orm:"resource_link"  json:"resource_link"`  // 资源内容，可以是资源链接
	Status          int         `orm:"status"            json:"status"`            // 是否开放状态（0正常 1 禁言）
	CreateTime      *gtime.Time `orm:"create_time"       json:"create_time"`       // 时间
	TopicTableIndex int         `orm:"topic_table_index" json:"topic_table_index"` // 表id 与表topic 相关 
	Name   string      `orm:"name,omitempty"       json:"name,omitempty"`   // 用户名
	Ext    string      `orm:"ext,omitempty"        json:"ext,omitempty"`    // 扩展字段 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}
