// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package answerhistorydetail

// Fill with you ideas below.
import (
	"github.com/gogf/gf/errors/gerror"
	"github.com/gogf/gf/frame/g"
)

// AddReq 用于存储新增请求的请求参数
type AddReq struct {
	HistoryId      int64  `p:"historyId" `
	QuestionId     int64  `p:"questionId" `
	QuestionAnswer string `p:"questionAnswer" `
	TopicId        int64  `p:"topicId" `
	AnswerRight    int    `p:"answerRight" `
}

// EditReq 用于存储修改请求参数
type EditReq struct {
	Id             int64  `p:"id" v:"required#主键ID不能为空"`
	HistoryId      int64  `p:"historyId" `
	QuestionId     int64  `p:"questionId" `
	QuestionAnswer string `p:"questionAnswer" `
	TopicId        int64  `p:"topicId" `
	AnswerRight    int    `p:"answerRight" `
}
type RemoveReq struct {
	Ids []int `p:"ids"` //删除id
}

// SelectPageReq 用于存储分页查询的请求参数
type SelectPageReq struct {
	HistoryId      int64  `p:"historyId"`      //答题记录id
	QuestionId     int64  `p:"questionId"`     //问题id
	QuestionAnswer string `p:"questionAnswer"` //描述题答案
	TopicId        int64  `p:"topicId"`        //主题id
	AnswerRight    int    `p:"answerRight"`    //1:准确，2错误  3未知
	BeginTime      string `p:"beginTime"`      //开始时间
	EndTime        string `p:"endTime"`        //结束时间
	PageNum        int64  `p:"pageNum"`        //当前页码
	PageSize       int    `p:"pageSize"`       //每页数
}

// GetPlugAdByID 根据ID查询记录
func GetByID(id int64) (*Entity, error) {
	entity, err := Model.FindOne(id)
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("根据ID查询记录出错")
	}
	if entity == nil {
		err = gerror.New("根据ID未能查询到记录")
	}
	return entity, nil
}

// AddSave 添加
func AddSave(req *AddReq) error {
	entity := new(Entity)
	//entity.Id = req.Id
	entity.HistoryId = req.HistoryId
	entity.QuestionId = req.QuestionId
	entity.QuestionAnswer = req.QuestionAnswer
	entity.TopicId = req.TopicId
	entity.AnswerRight = req.AnswerRight
	result, err := Model.Save(entity)
	if err != nil {
		return err
	}
	_, err = result.LastInsertId()
	if err != nil {
		return err
	}
	return nil
}

// 删除
func DeleteByIds(Ids []int) error {
	_, err := Model.Delete("id in(?)", Ids)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("删除失败")
	}
	return nil
}

// 根据ID来修改信息
func EditSave(req *EditReq) error {
	// 先根据ID来查询要修改的记录
	entity, err := GetByID(req.Id)
	if err != nil {
		return err
	}
	// 修改实体
	entity.HistoryId = req.HistoryId
	entity.QuestionId = req.QuestionId
	entity.QuestionAnswer = req.QuestionAnswer
	entity.TopicId = req.TopicId
	entity.AnswerRight = req.AnswerRight
	_, err = Model.Save(entity)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("修改失败")
	}
	return nil
}

// 分页查询,返回值total总记录数,page当前页
func SelectListByPage(req *SelectPageReq) (total int, page int64, list []*Entity, err error) {
	model := Model
	if req != nil {
		if req.QuestionAnswer != "" {
			model = model.Where("question_answer = ?", req.QuestionAnswer)
		}
	}
	// 查询总记录数(总行数)
	total, err = model.Count()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("获取总记录数失败")
		return
	}
	if req.PageNum == 0 {
		req.PageNum = 1
	}
	page = req.PageNum
	if req.PageSize == 0 {
		req.PageSize = 10
	}
	// 分页排序查询
	list, err = model.Page(int(page), int(req.PageSize)).Order("id asc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("分页查询失败")
		return
	}
	return
}

// 获取所有数据
func SelectListAll(req *SelectPageReq) (list []*Entity, err error) {
	model := Model
	if req != nil {
		if req.QuestionAnswer != "" {
			model.Where("question_answer = ?", req.QuestionAnswer)
		}
	}
	// 查询
	list, err = model.Order("id asc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("查询失败")
		return
	}
	return
}
