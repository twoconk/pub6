// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package guaniu_study_topic_members

// Fill with you ideas below.
import (
	"github.com/gogf/gf/errors/gerror"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
)

// AddReq 用于存储新增请求的请求参数
type AddReq struct {
	TopicId         int64       `p:"topicId" `
	UserId          int64       `p:"userId" `
	Status          int         `p:"status" v:"required#是否开放状态（0正常 1 禁言）不能为空"`
	AdminFlag       int         `p:"adminFlag" `
	CreateTime      *gtime.Time `p:"createTime" `
	TopicTableIndex int         `p:"topicTableIndex" `
}

// EditReq 用于存储修改请求参数
type EditReq struct {
	Id              int64 `p:"id" v:"required#主键ID不能为空"`
	TopicId         int64 `p:"topicId" `
	UserId          int64 `p:"userId" `
	Status          int   `p:"status" v:"required#是否开放状态（0正常 1 禁言）不能为空"`
	AdminFlag       int   `p:"adminFlag" `
	TopicTableIndex int   `p:"topicTableIndex" `
}
type RemoveReq struct {
	Ids []int `p:"ids"` //删除id
}
type RemoveReqByTopic struct {
	TopicId         int64 `p:"topicId" `
	UserId          int64 `p:"userId" `
}
type GetReqByTopic struct {
	TopicId         int64 `p:"topicId" `
	UserId          int64 `p:"userId" `
}


// Entity is the golang structure for table guaniu_study_users.
type EntityUser struct {
	Id     int64      `orm:"id,primary" json:"id"`     // 主键
	Name   string      `orm:"name"       json:"name"`   // 用户名
	Ext    string      `orm:"ext"        json:"ext"`    // 扩展字段
	Ctime  int         `orm:"ctime"      json:"ctime"`  // 创建时间 
	UserProfile interface{} `json:"user_profile"` //临时增加对象
}
// Entity is the golang structure for table guaniu_study_users.
type EntityUserProfile struct {
	Id     int64      `orm:"id,primary" json:"id"`     // 主键
	UserId   int64      `orm:"user_id"       json:"user_id"`   // 用户id
	AvaterPath    string      `orm:"avater_path"        json:"avater_path"`    // 头像路径
	AvaterThumbnailPath    string      `orm:"avater_thumbnail_path"        json:"avater_thumbnail_path"`    // 头像路径
	CurrentJobCompany    string      `orm:"current_job_company"        json:"current_job_company"`    //  
	HomebgPath    string      `orm:"home_bg_path"        json:"home_bg_path"`    //  
	SignNotes    string      `orm:"sign_notes"        json:"sign_notes"`    //  
	WeiboId    string      `orm:"weibo_id"        json:"weibo_id"`    //  
	WeixinId    string      `orm:"weixin_id"        json:"weixin_id"`    //  
	GithubId    string      `orm:"github_id"        json:"github_id"`    //  
	QQId    string      `orm:"qq_id"        json:"qq_id"`    //  
	DoubanId    string      `orm:"douban_id"        json:"douban_id"`    //  
	CsdnId    string      `orm:"csdn_id"        json:"csdn_id"`    //  
	Site    string      `orm:"blog_site"        json:"blog_site"`    //  
	UserStars  int         `orm:"user_stars"      json:"user_stars"`  // 用户积分 
}

// SelectPageReq 用于存储分页查询的请求参数
type SelectPageReq struct {
	TopicId         int64  `p:"topicId"`         //主题id
	UserId          int64  `p:"userId"`          //成员id
	Status          int    `p:"status"`          //是否开放状态（0正常 1 禁言）
	AdminFlag       int    `p:"adminFlag"`       //是否管理员（0不是 1 管理员）
	TopicTableIndex int    `p:"topicTableIndex"` //表id 与表topic 相关
	BeginTime       string `p:"beginTime"`       //开始时间
	EndTime         string `p:"endTime"`         //结束时间
	PageNum         int64  `p:"pageNum"`         //当前页码
	PageSize        int    `p:"pageSize"`        //每页数
}


// GetPlugAdByID 根据ID查询记录
func GetByID(id int64) (*Entity, error) {
	entity, err := Model.FindOne(id)
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("根据ID查询记录出错")
	}
	if entity == nil {
		err = gerror.New("根据ID未能查询到记录")
	}
	return entity, nil
}

// AddSave 添加
func AddSave(req *AddReq) error {
	entity := new(Entity)
	//entity.Id = req.Id
	entity.TopicId = req.TopicId
	entity.UserId = req.UserId
	entity.Status = req.Status
	entity.AdminFlag = req.AdminFlag
	entity.CreateTime = req.CreateTime
	entity.TopicTableIndex = req.TopicTableIndex
	result, err := Model.Save(entity)
	if err != nil {
		return err
	}
	_, err = result.LastInsertId()
	if err != nil {
		return err
	}
	return nil
}

// 删除
func DeleteByIds(Ids []int) error {
	_, err := Model.Delete("id in(?)", Ids)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("删除失败")
	}
	return nil
}

//根据主题id和用户id退出
func DeleteByTopicId(req *RemoveReqByTopic) error {

	_, err := Model.Delete("topic_id = ? and user_id = ? ", req.TopicId, req.UserId)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("删除失败")
	}
	return nil
}

func CheckUserInMembers(topic_id int64, user_id int64) (*Entity, error) {
	entity, err := Model.Where("topic_id = ? and user_id = ? ", topic_id, user_id).One()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("根据ID查询记录出错")
	}
	if entity == nil {
		err = gerror.New("根据ID未能查询到记录")
	}
	return entity, nil
}

func GetByTopicId(req *GetReqByTopic) (*Entity, error) {
	entity, err := Model.Where("topic_id = ? and user_id = ? ", req.TopicId, req.UserId).One()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("根据ID查询记录出错")
	}
	if entity == nil {
		err = gerror.New("根据ID未能查询到记录")
	}
	return entity, nil
}

// 根据ID来修改信息
func EditSave(req *EditReq) error {
	// 先根据ID来查询要修改的记录
	entity, err := GetByID(req.Id)
	if err != nil {
		return err
	}
	// 修改实体
	entity.TopicId = req.TopicId
	entity.UserId = req.UserId
	entity.Status = req.Status
	entity.AdminFlag = req.AdminFlag
	entity.TopicTableIndex = req.TopicTableIndex
	_, err = Model.Save(entity)
	if err != nil {
		g.Log().Error(err)
		return gerror.New("修改失败")
	}
	return nil
}

// 分页查询,返回值total总记录数,page当前页
func SelectListByPage(req *SelectPageReq) (total int, page int64, list []*EntityUser, err error) {
	if req == nil || req.TopicId == 0 {
		//不能没有Topicid
		err = gerror.New("获取总记录数失败")
		return
	}
	model := g.DB().Table("guaniu_study_topic_members members")
 
	if req != nil { 
		model = model.Where("topic_id = ?", req.TopicId) 
	}
	// 查询总记录数(总行数)
	total, err = model.Count()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("获取总记录数失败")
		return
	}
	if req.PageNum == 0 {
		req.PageNum = 1
	}
	page = int64(req.PageNum)
	if req.PageSize == 0 {
		req.PageSize = 10
	}
  	//关联查询 , todo:性能优化 
    model.InnerJoin("guaniu_study_users user", "members.user_id=user.id").Fields("user.id, user.name, user.ext").Where("members.topic_id = ?", req.TopicId).Page(int(page), int(req.PageSize)).Order("members.id desc").Structs(&list)
 

	return
}
// 获取所有数据
func SelectListAll(req *SelectPageReq) (list []*Entity, err error) {
	model := Model
	if req != nil {
	}
	// 查询
	list, err = model.Order("id asc").All()
	if err != nil {
		g.Log().Error(err)
		err = gerror.New("查询失败")
		return
	}
	return
}
