// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package wf_run_log

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table wf_run_log.
type Entity struct {
	Id        uint   `orm:"id,primary" json:"id"`         //
	Uid       uint   `orm:"uid"        json:"uid"`        // 用户ID
	FromId    int    `orm:"from_id"    json:"from_id"`    // 单据ID
	FromTable string `orm:"from_table" json:"from_table"` // 单据表
	RunId     uint   `orm:"run_id"     json:"run_id"`     // 流转id
	RunFlow   uint   `orm:"run_flow"   json:"run_flow"`   // 流程ID
	Content   string `orm:"content"    json:"content"`    // 日志内容
	Dateline  uint   `orm:"dateline"   json:"dateline"`   // 添加时间
	Btn       string `orm:"btn"        json:"btn"`        // 提交操作信息
	Art       string `orm:"art"        json:"art"`        // 附件日志
	WorkInfo  string `orm:"work_info"  json:"work_info"`  // 事务日志
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
